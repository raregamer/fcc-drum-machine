{"version":3,"sources":["Display.js","Drumpad.js","App.js","serviceWorker.js","index.js"],"names":["Display","className","id","this","props","displayName","React","Component","Drumpad","onClick","playSound","keyLetter","soundName","src","sound","type","App","state","display","bind","updateDisplay","displayText","setState","soundID","audio","Number","isInteger","String","fromCharCode","document","querySelector","currentTime","play","addEventListener","event","keyCode","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAWeA,G,uLAPP,OAAO,yBAAKC,UAAU,qBAClB,yBAAKC,GAAG,WAAWC,KAAKC,MAAMC,aAC9B,0BAAMH,GAAG,QAAT,e,GAJUI,IAAMC,YCiBbC,E,iLAXF,IAAD,OACJ,OACI,6BACA,4BAAQC,QAAW,WAAO,EAAKL,MAAMM,UAAU,EAAKN,MAAMO,YAAaT,GAAIC,KAAKC,MAAMQ,UAAWX,UAAY,YAAYE,KAAKC,MAAMO,UACpI,2BAAOT,GAAIC,KAAKC,MAAMO,UAAWE,IAAKV,KAAKC,MAAMU,MAAOC,KAAK,YAAYd,UAAU,QAAnF,W,GAVUK,IAAMC,WCuHbS,E,YAlHb,WAAYZ,GAAO,IAAD,8BAChB,4CAAMA,KACDa,MAAQ,CACXC,QAAS,UAGX,EAAKR,UAAY,EAAKA,UAAUS,KAAf,gBACjB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAPL,E,2EAUJE,GACZlB,KAAKmB,SAAS,CACZJ,QAASG,M,gCAKHE,GAIR,IAAIC,EACJ,OAJGC,OAAOC,UAAUH,KAClBA,EAAUI,OAAOC,aAAaL,IAGzBA,GACL,IAAK,IACHpB,KAAKiB,cAAc,SACnBI,EAAQK,SAASC,cAAc,OACzBC,YAAc,EACpBP,EAAMQ,OACN,MACF,IAAK,IACH7B,KAAKiB,cAAc,SACnBI,EAAQK,SAASC,cAAc,OACzBC,YAAc,EACpBP,EAAMQ,OACN,MACF,IAAK,IACH7B,KAAKiB,cAAc,SACnBI,EAAQK,SAASC,cAAc,OACzBC,YAAc,EACpBP,EAAMQ,OACN,MACF,IAAK,IACH7B,KAAKiB,cAAc,WACnBI,EAAQK,SAASC,cAAc,OACzBC,YAAc,EACpBP,EAAMQ,OACN,MACF,IAAK,IACH7B,KAAKiB,cAAc,aACnBI,EAAQK,SAASC,cAAc,OACzBC,YAAc,EACpBP,EAAMQ,OACN,MACF,IAAK,IACH7B,KAAKiB,cAAc,SACnBI,EAAQK,SAASC,cAAc,OACzBC,YAAc,EACpBP,EAAMQ,OACN,MACF,IAAK,IACH7B,KAAKiB,cAAc,UACnBI,EAAQK,SAASC,cAAc,OACzBC,YAAc,EACpBP,EAAMQ,OACN,MACF,IAAK,IACH7B,KAAKiB,cAAc,SACnBI,EAAQK,SAASC,cAAc,OACzBC,YAAc,EACpBP,EAAMQ,OACN,MACF,IAAK,IACH7B,KAAKiB,cAAc,QACnBI,EAAQK,SAASC,cAAc,OACzBC,YAAc,EACpBP,EAAMQ,OACN,MAEF,QACE,U,0CAKc,IAAD,OACjBH,SAASI,iBAAiB,UAAU,SAACC,GAC9B,EAAKxB,UAAUwB,EAAMC,a,+BAQ9B,OACE,yBAAKlC,UAAY,gBACf,kBAAC,EAAD,CAASI,YAAeF,KAAKc,MAAMC,UACnC,yBAAKhB,GAAI,yBAAyBD,UAAW,UAC7C,kBAAC,EAAD,CAASS,UAAaP,KAAKO,UAAWE,UAAY,OAAOE,MAAQ,oBAAoBH,UAAY,MACjG,kBAAC,EAAD,CAASD,UAAaP,KAAKO,UAAWE,UAAY,OAAOE,MAAO,oBAAoBH,UAAY,MAChG,kBAAC,EAAD,CAASD,UAAaP,KAAKO,UAAWE,UAAY,OAAOE,MAAO,oBAAoBH,UAAY,MAChG,kBAAC,EAAD,CAASD,UAAaP,KAAKO,UAAWE,UAAY,QAAQE,MAAO,qBAAqBH,UAAY,MAClG,kBAAC,EAAD,CAASD,UAAaP,KAAKO,UAAWE,UAAY,UAAUE,MAAO,uBAAuBH,UAAY,MACtG,kBAAC,EAAD,CAASD,UAAaP,KAAKO,UAAWE,UAAY,OAAOE,MAAO,oBAAoBH,UAAY,MAChG,kBAAC,EAAD,CAASD,UAAaP,KAAKO,UAAWE,UAAY,QAAQE,MAAO,qBAAqBH,UAAY,MAClG,kBAAC,EAAD,CAASD,UAAaP,KAAKO,UAAWE,UAAY,OAAOE,MAAO,oBAAoBH,UAAY,MAChG,kBAAC,EAAD,CAASD,UAAaP,KAAKO,UAAWE,UAAY,MAAME,MAAO,mBAAmBH,UAAY,Y,GA5GlFL,IAAMC,WCOJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASc,eAAe,iBD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.edd6efa9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Display extends React.Component{\r\n    render(){\r\n        return(<div className=\"container-display\">\r\n            <div id=\"display\">{this.props.displayName}</div>\r\n            <span id=\"logo\">SJB-30</span>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nclass Drumpad extends React.Component{\r\n\r\n\r\n\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <button onClick = {() => {this.props.playSound(this.props.keyLetter)}} id={this.props.soundName} className = \"drum-pad\">{this.props.keyLetter} \r\n            <audio id={this.props.keyLetter} src={this.props.sound} type=\"audio/wav\" className=\"clip\"> </audio>\r\n            </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Drumpad;","import React from 'react';\r\nimport './App.css';\r\nimport Display from './Display';\r\nimport Drumpad from './Drumpad';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      display: \"SJB-30\"\r\n    }\r\n\r\n    this.playSound = this.playSound.bind(this);\r\n    this.updateDisplay = this.updateDisplay.bind(this);\r\n  }\r\n\r\n  updateDisplay(displayText){\r\n    this.setState({\r\n      display: displayText\r\n    })\r\n  }\r\n\r\n    \r\n  playSound(soundID){\r\n    if(Number.isInteger(soundID)){\r\n      soundID = String.fromCharCode(soundID);\r\n    }\r\n    var audio;\r\n    switch(soundID){\r\n      case 'Q':\r\n        this.updateDisplay(\"Kick\");\r\n        audio = document.querySelector('#Q');\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        break;\r\n      case 'W':\r\n        this.updateDisplay(\"Clap\");\r\n        audio = document.querySelector('#W');\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        break;\r\n      case 'E':\r\n        this.updateDisplay(\"Boom\");\r\n        audio = document.querySelector('#E');\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        break;\r\n      case 'A':\r\n        this.updateDisplay(\"Hi-hat\");\r\n        audio = document.querySelector('#A');\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        break;\r\n      case 'S':\r\n        this.updateDisplay(\"Open-hat\")\r\n        audio = document.querySelector('#S');\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        break;\r\n      case 'D':\r\n        this.updateDisplay(\"Ride\")\r\n        audio = document.querySelector('#D');\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        break;\r\n      case 'Z':\r\n        this.updateDisplay(\"Snare\");\r\n        audio = document.querySelector('#Z');\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        break;\r\n      case 'X':\r\n        this.updateDisplay(\"Tink\");\r\n        audio = document.querySelector('#X');\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        break;\r\n      case 'C':\r\n        this.updateDisplay(\"Tom\");\r\n        audio = document.querySelector('#C');\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n        break;\r\n\r\n      default: \r\n        return;\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener(\"keydown\",(event) =>{\r\n           this.playSound(event.keyCode);\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n  render(){\r\n  return (\r\n    <div className = \"drum-machine\">\r\n      <Display displayName = {this.state.display} />\r\n      <div id =\"gridContainer-drumpads\" className= \"center\">\r\n      <Drumpad playSound = {this.playSound} soundName = \"kick\" sound = \"./sounds/kick.wav\" keyLetter = \"Q\"/>\r\n      <Drumpad playSound = {this.playSound} soundName = \"clap\" sound =\"./sounds/clap.wav\" keyLetter = \"W\"/>\r\n      <Drumpad playSound = {this.playSound} soundName = \"boom\" sound =\"./sounds/boom.wav\" keyLetter = \"E\"/>\r\n      <Drumpad playSound = {this.playSound} soundName = \"hihat\" sound =\"./sounds/hihat.wav\" keyLetter = \"A\"/>\r\n      <Drumpad playSound = {this.playSound} soundName = \"openhat\" sound =\"./sounds/openhat.wav\" keyLetter = \"S\"/>\r\n      <Drumpad playSound = {this.playSound} soundName = \"ride\" sound =\"./sounds/ride.wav\" keyLetter = \"D\"/>\r\n      <Drumpad playSound = {this.playSound} soundName = \"snare\" sound =\"./sounds/snare.wav\" keyLetter = \"Z\"/>\r\n      <Drumpad playSound = {this.playSound} soundName = \"tink\" sound =\"./sounds/tink.wav\" keyLetter = \"X\"/>\r\n      <Drumpad playSound = {this.playSound} soundName = \"tom\" sound =\"./sounds/tom.wav\" keyLetter = \"C\"/>\r\n      </div>\r\n    </div>\r\n      \r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('drum-machine'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}