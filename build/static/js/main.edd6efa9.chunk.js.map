{"version":3,"sources":["Display.js","Drumpad.js","App.js","serviceWorker.js","index.js"],"names":["Display","className","id","this","props","displayName","React","Component","Drumpad","onClick","playSound","keyLetter","soundName","src","sound","type","App","state","display","bind","updateDisplay","displayText","setState","soundID","audio","Number","isInteger","String","fromCharCode","document","querySelector","currentTime","play","addEventListener","event","keyCode","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edd6efa9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Display extends React.Component{\r\n    render(){\r\n        return(<div className=\"container-display\">\r\n            <div id=\"display\">{this.props.displayName}</div>\r\n            <span id=\"logo\">SJB-30</span>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nclass Drumpad extends React.Component{\r\n\r\n\r\n\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <button onClick = {() => {this.props.playSound(this.props.keyLetter)}} id={this.props.soundName} className = \"drum-pad\">{this.props.keyLetter} \r\n            <audio id={this.props.keyLetter} src={this.props.sound} type=\"audio/wav\" className=\"clip\"> </audio>\r\n            </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Drumpad;","import React from 'react';\nimport './App.css';\nimport Display from './Display';\nimport Drumpad from './Drumpad';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      display: \"SJB-30\"\n    }\n\n    this.playSound = this.playSound.bind(this);\n    this.updateDisplay = this.updateDisplay.bind(this);\n  }\n\n  updateDisplay(displayText){\n    this.setState({\n      display: displayText\n    })\n  }\n\n    \n  playSound(soundID){\n    if(Number.isInteger(soundID)){\n      soundID = String.fromCharCode(soundID);\n    }\n    var audio;\n    switch(soundID){\n      case 'Q':\n        this.updateDisplay(\"Kick\");\n        audio = document.querySelector('#Q');\n        audio.currentTime = 0;\n        audio.play();\n        break;\n      case 'W':\n        this.updateDisplay(\"Clap\");\n        audio = document.querySelector('#W');\n        audio.currentTime = 0;\n        audio.play();\n        break;\n      case 'E':\n        this.updateDisplay(\"Boom\");\n        audio = document.querySelector('#E');\n        audio.currentTime = 0;\n        audio.play();\n        break;\n      case 'A':\n        this.updateDisplay(\"Hi-hat\");\n        audio = document.querySelector('#A');\n        audio.currentTime = 0;\n        audio.play();\n        break;\n      case 'S':\n        this.updateDisplay(\"Open-hat\")\n        audio = document.querySelector('#S');\n        audio.currentTime = 0;\n        audio.play();\n        break;\n      case 'D':\n        this.updateDisplay(\"Ride\")\n        audio = document.querySelector('#D');\n        audio.currentTime = 0;\n        audio.play();\n        break;\n      case 'Z':\n        this.updateDisplay(\"Snare\");\n        audio = document.querySelector('#Z');\n        audio.currentTime = 0;\n        audio.play();\n        break;\n      case 'X':\n        this.updateDisplay(\"Tink\");\n        audio = document.querySelector('#X');\n        audio.currentTime = 0;\n        audio.play();\n        break;\n      case 'C':\n        this.updateDisplay(\"Tom\");\n        audio = document.querySelector('#C');\n        audio.currentTime = 0;\n        audio.play();\n        break;\n\n      default: \n        return;\n    }\n\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\",(event) =>{\n           this.playSound(event.keyCode);\n  });\n}\n\n\n\n\n  render(){\n  return (\n    <div className = \"drum-machine\">\n      <Display displayName = {this.state.display} />\n      <div id =\"gridContainer-drumpads\" className= \"center\">\n      <Drumpad playSound = {this.playSound} soundName = \"kick\" sound = \"./sounds/kick.wav\" keyLetter = \"Q\"/>\n      <Drumpad playSound = {this.playSound} soundName = \"clap\" sound =\"./sounds/clap.wav\" keyLetter = \"W\"/>\n      <Drumpad playSound = {this.playSound} soundName = \"boom\" sound =\"./sounds/boom.wav\" keyLetter = \"E\"/>\n      <Drumpad playSound = {this.playSound} soundName = \"hihat\" sound =\"./sounds/hihat.wav\" keyLetter = \"A\"/>\n      <Drumpad playSound = {this.playSound} soundName = \"openhat\" sound =\"./sounds/openhat.wav\" keyLetter = \"S\"/>\n      <Drumpad playSound = {this.playSound} soundName = \"ride\" sound =\"./sounds/ride.wav\" keyLetter = \"D\"/>\n      <Drumpad playSound = {this.playSound} soundName = \"snare\" sound =\"./sounds/snare.wav\" keyLetter = \"Z\"/>\n      <Drumpad playSound = {this.playSound} soundName = \"tink\" sound =\"./sounds/tink.wav\" keyLetter = \"X\"/>\n      <Drumpad playSound = {this.playSound} soundName = \"tom\" sound =\"./sounds/tom.wav\" keyLetter = \"C\"/>\n      </div>\n    </div>\n      \n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('drum-machine'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}